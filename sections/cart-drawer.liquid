{%- style -%}
  .cart-drawer {
    position: fixed;
    top: 0;
    right: -100%;
    width: 100%;
    max-width: 400px;
    height: 100vh;
    background: white;
    z-index: 1000;
    transition: right 0.3s ease;
    overflow-y: auto;
    box-shadow: -2px 0 10px rgba(0,0,0,0.1);
  }

  .cart-drawer.open {
    right: 0;
  }

  .cart-drawer__overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .cart-drawer__overlay.open {
    opacity: 1;
    visibility: visible;
  }

  .cart-drawer__header {
    padding: 1.5rem;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .cart-drawer__title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
  }

  .cart-drawer__close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
  }

  .cart-drawer__content {
    padding: 1.5rem;
  }

  .cart-drawer__items {
    margin-bottom: 2rem;
  }

  .cart-drawer__item {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #eee;
  }

  .cart-drawer__item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
  }

  .cart-drawer__item-details {
    flex: 1;
  }

  .cart-drawer__item-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }

  .cart-drawer__item-variant {
    color: #666;
    font-size: 0.8rem;
    margin-bottom: 0.5rem;
  }

  .cart-drawer__item-price {
    font-weight: 600;
    color: {{ settings.colors_accent_1 }};
    margin-bottom: 0.5rem;
  }

  .cart-drawer__item-quantity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .cart-drawer__quantity-button {
    width: 30px;
    height: 30px;
    border: 1px solid #ddd;
    background: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }

  .cart-drawer__quantity-input {
    width: 50px;
    text-align: center;
    border: 1px solid #ddd;
    padding: 0.25rem;
    border-radius: 4px;
  }

  .cart-drawer__item-remove {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    font-size: 0.8rem;
    text-decoration: underline;
  }

  .cart-drawer__summary {
    border-top: 1px solid #eee;
    padding-top: 1.5rem;
  }

  .cart-drawer__subtotal {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    font-weight: 600;
  }

  .cart-drawer__checkout {
    width: 100%;
    background: {{ settings.colors_accent_1 }};
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    margin-bottom: 1rem;
    transition: background 0.3s ease;
  }

  .cart-drawer__checkout:hover {
    background: {{ settings.colors_accent_2 }};
  }

  .cart-drawer__continue {
    width: 100%;
    background: white;
    color: {{ settings.colors_text }};
    border: 1px solid #ddd;
    padding: 1rem;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .cart-drawer__continue:hover {
    background: #f5f5f5;
  }

  .cart-drawer__empty {
    text-align: center;
    padding: 2rem;
  }

  .cart-drawer__empty-title {
    font-size: 1.2rem;
    margin-bottom: 1rem;
  }

  .cart-drawer__empty-text {
    color: #666;
    margin-bottom: 2rem;
  }

  .cart-drawer__empty-button {
    background: {{ settings.colors_accent_1 }};
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
  }

  .cart-drawer__upsell {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }

  .cart-drawer__upsell-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .cart-drawer__upsell-item {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
    border: 1px solid #eee;
    border-radius: 4px;
  }

  .cart-drawer__upsell-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
  }

  .cart-drawer__upsell-details {
    flex: 1;
  }

  .cart-drawer__upsell-title {
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .cart-drawer__upsell-price {
    color: {{ settings.colors_accent_1 }};
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .cart-drawer__upsell-button {
    background: {{ settings.colors_accent_1 }};
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .cart-drawer__upsell-button:hover {
    background: {{ settings.colors_accent_2 }};
  }

  @media screen and (max-width: 749px) {
    .cart-drawer {
      max-width: 100%;
    }
  }
{%- endstyle -%}

<div class="cart-drawer" id="cart-drawer">
  <div class="cart-drawer__header">
    <h2 class="cart-drawer__title">Your Cart</h2>
    <button class="cart-drawer__close" id="cart-drawer-close">Ã—</button>
  </div>
  
  <div class="cart-drawer__content">
    <div class="cart-drawer__items" id="cart-drawer-items">
      <!-- Cart items will be populated here -->
    </div>
    
    <div class="cart-drawer__summary" id="cart-drawer-summary">
      <div class="cart-drawer__subtotal">
        <span>Subtotal:</span>
        <span id="cart-drawer-subtotal">$0.00</span>
      </div>
      
      <button class="cart-drawer__checkout" id="cart-drawer-checkout">
        Checkout
      </button>
      
      <button class="cart-drawer__continue" id="cart-drawer-continue">
        Continue Shopping
      </button>
    </div>
    
    {%- if section.settings.show_related_products -%}
      <div class="cart-drawer__upsell" id="cart-drawer-upsell">
        <h3 class="cart-drawer__upsell-title">You might also like</h3>
        <!-- Upsell items will be populated here -->
      </div>
    {%- endif -%}
  </div>
</div>

<div class="cart-drawer__overlay" id="cart-drawer-overlay"></div>

<script>
  class CartDrawer {
    constructor() {
      this.drawer = document.getElementById('cart-drawer');
      this.overlay = document.getElementById('cart-drawer-overlay');
      this.closeButton = document.getElementById('cart-drawer-close');
      this.continueButton = document.getElementById('cart-drawer-continue');
      this.checkoutButton = document.getElementById('cart-drawer-checkout');
      this.itemsContainer = document.getElementById('cart-drawer-items');
      this.subtotalElement = document.getElementById('cart-drawer-subtotal');
      this.upsellContainer = document.getElementById('cart-drawer-upsell');
      
      this.init();
    }
    
    init() {
      this.closeButton.addEventListener('click', () => this.close());
      this.overlay.addEventListener('click', () => this.close());
      this.continueButton.addEventListener('click', () => this.close());
      this.checkoutButton.addEventListener('click', () => this.checkout());
      
      // Listen for cart updates
      document.addEventListener('cart:updated', () => this.updateCart());
      
      // Load initial cart
      this.updateCart();
    }
    
    open() {
      this.drawer.classList.add('open');
      this.overlay.classList.add('open');
      document.body.style.overflow = 'hidden';
    }
    
    close() {
      this.drawer.classList.remove('open');
      this.overlay.classList.remove('open');
      document.body.style.overflow = '';
    }
    
    async updateCart() {
      try {
        const response = await fetch('/cart.js');
        const cart = await response.json();
        
        this.renderCart(cart);
        this.updateCartCount(cart);
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    }
    
    renderCart(cart) {
      if (cart.items.length === 0) {
        this.renderEmptyCart();
        return;
      }
      
      this.itemsContainer.innerHTML = cart.items.map(item => `
        <div class="cart-drawer__item" data-key="${item.key}">
          <img src="${item.image}" alt="${item.title}" class="cart-drawer__item-image">
          <div class="cart-drawer__item-details">
            <div class="cart-drawer__item-title">${item.title}</div>
            <div class="cart-drawer__item-variant">${item.variant_title || ''}</div>
            <div class="cart-drawer__item-price">${this.formatMoney(item.price)}</div>
            <div class="cart-drawer__item-quantity">
              <button class="cart-drawer__quantity-button" data-action="decrease">-</button>
              <input type="number" class="cart-drawer__quantity-input" value="${item.quantity}" min="1">
              <button class="cart-drawer__quantity-button" data-action="increase">+</button>
            </div>
            <button class="cart-drawer__item-remove" data-action="remove">Remove</button>
          </div>
        </div>
      `).join('');
      
      this.subtotalElement.textContent = this.formatMoney(cart.total_price);
      
      // Add event listeners
      this.addItemEventListeners();
      
      // Load upsell products
      if (this.upsellContainer) {
        this.loadUpsellProducts();
      }
    }
    
    renderEmptyCart() {
      this.itemsContainer.innerHTML = `
        <div class="cart-drawer__empty">
          <h3 class="cart-drawer__empty-title">Your cart is empty</h3>
          <p class="cart-drawer__empty-text">Add some items to get started!</p>
          <a href="/collections/all" class="cart-drawer__empty-button">Continue Shopping</a>
        </div>
      `;
      
      this.subtotalElement.textContent = '$0.00';
    }
    
    addItemEventListeners() {
      this.itemsContainer.addEventListener('click', async (e) => {
        const action = e.target.dataset.action;
        const itemElement = e.target.closest('.cart-drawer__item');
        const key = itemElement.dataset.key;
        
        if (action === 'remove') {
          await this.removeItem(key);
        } else if (action === 'increase') {
          const input = itemElement.querySelector('.cart-drawer__quantity-input');
          const newQuantity = parseInt(input.value) + 1;
          await this.updateItemQuantity(key, newQuantity);
        } else if (action === 'decrease') {
          const input = itemElement.querySelector('.cart-drawer__quantity-input');
          const newQuantity = Math.max(1, parseInt(input.value) - 1);
          await this.updateItemQuantity(key, newQuantity);
        }
      });
      
      this.itemsContainer.addEventListener('change', async (e) => {
        if (e.target.classList.contains('cart-drawer__quantity-input')) {
          const itemElement = e.target.closest('.cart-drawer__item');
          const key = itemElement.dataset.key;
          const quantity = parseInt(e.target.value);
          
          if (quantity > 0) {
            await this.updateItemQuantity(key, quantity);
          }
        }
      });
    }
    
    async removeItem(key) {
      try {
        const response = await fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line: key,
            quantity: 0
          })
        });
        
        if (response.ok) {
          this.updateCart();
        }
      } catch (error) {
        console.error('Error removing item:', error);
      }
    }
    
    async updateItemQuantity(key, quantity) {
      try {
        const response = await fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line: key,
            quantity: quantity
          })
        });
        
        if (response.ok) {
          this.updateCart();
        }
      } catch (error) {
        console.error('Error updating quantity:', error);
      }
    }
    
    async loadUpsellProducts() {
      try {
        const response = await fetch('/collections/{{ section.settings.cart_drawer_collection | default: "all" }}.js');
        const collection = await response.json();
        
        const upsellProducts = collection.products.slice(0, {{ section.settings.related_products_count | default: 4 }});
        
        this.upsellContainer.innerHTML = `
          <h3 class="cart-drawer__upsell-title">You might also like</h3>
          ${upsellProducts.map(product => `
            <div class="cart-drawer__upsell-item">
              <img src="${product.featured_image}" alt="${product.title}" class="cart-drawer__upsell-image">
              <div class="cart-drawer__upsell-details">
                <div class="cart-drawer__upsell-title">${product.title}</div>
                <div class="cart-drawer__upsell-price">${this.formatMoney(product.price)}</div>
                <button class="cart-drawer__upsell-button" data-product-id="${product.id}">
                  Add to Cart
                </button>
              </div>
            </div>
          `).join('')}
        `;
        
        // Add upsell event listeners
        this.upsellContainer.addEventListener('click', async (e) => {
          if (e.target.classList.contains('cart-drawer__upsell-button')) {
            const productId = e.target.dataset.productId;
            await this.addUpsellProduct(productId);
          }
        });
      } catch (error) {
        console.error('Error loading upsell products:', error);
      }
    }
    
    async addUpsellProduct(productId) {
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: productId,
            quantity: 1
          })
        });
        
        if (response.ok) {
          this.updateCart();
        }
      } catch (error) {
        console.error('Error adding upsell product:', error);
      }
    }
    
    updateCartCount(cart) {
      const cartCount = cart.item_count;
      const cartIcon = document.getElementById('cart-icon-bubble');
      
      if (cartIcon) {
        const countElement = cartIcon.querySelector('.cart-count-bubble');
        if (countElement) {
          countElement.textContent = cartCount;
          countElement.style.display = cartCount > 0 ? 'block' : 'none';
        }
      }
    }
    
    checkout() {
      window.location.href = '/checkout';
    }
    
    formatMoney(cents) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(cents / 100);
    }
  }
  
  // Initialize cart drawer
  document.addEventListener('DOMContentLoaded', () => {
    window.cartDrawer = new CartDrawer();
  });
  
  // Open cart drawer when cart icon is clicked
  document.addEventListener('click', (e) => {
    if (e.target.closest('#cart-icon-bubble')) {
      e.preventDefault();
      window.cartDrawer.open();
    }
  });
</script>

{% schema %}
{
  "name": "t:sections.cart-drawer.name",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "default": "Your Cart",
      "label": "t:sections.cart-drawer.settings.heading.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.cart-drawer.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "default": true,
      "label": "t:sections.cart-drawer.settings.show_cart_note.label"
    },
    {
      "type": "checkbox",
      "id": "enable_cart_notes",
      "default": true,
      "label": "t:sections.cart-drawer.settings.enable_cart_notes.label"
    },
    {
      "type": "checkbox",
      "id": "show_taxes_included",
      "default": true,
      "label": "t:sections.cart-drawer.settings.show_taxes_included.label"
    },
    {
      "type": "checkbox",
      "id": "cart_checkout_button",
      "default": true,
      "label": "t:sections.cart-drawer.settings.cart_checkout_button.label"
    },
    {
      "type": "collection",
      "id": "cart_drawer_collection",
      "label": "t:sections.cart-drawer.settings.cart_drawer_collection.label"
    },
    {
      "type": "checkbox",
      "id": "show_related_products",
      "default": true,
      "label": "t:sections.cart-drawer.settings.show_related_products.label"
    },
    {
      "type": "range",
      "id": "related_products_count",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.cart-drawer.settings.related_products_count.label"
    }
  ]
}
{% endschema %}